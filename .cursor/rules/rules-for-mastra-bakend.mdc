---
description: 
globs: 
alwaysApply: true
---
# バックエンドワークフロー利用ルール

このドキュメントは、Next.js／従来のAPI実装とMastraワークフローの使い分けルールをプロジェクト標準として定めるものです。

---

## 1. Next.js／従来バックエンド実装を使用するケース
- **単一API呼び出し・単純CRUD**  
  ユーザー一覧取得、プロファイル更新など単発のデータ操作
- **高頻度・低レイテンシ要件**  
  ページロード時の即時データ取得など高速応答が必須のホットパス
- **軽量なホットパス**  
  ワークフロー起動のオーバーヘッドが許容できない処理

## 2. Mastraワークフローを使用するケース
- **複数ステップにまたがる長い業務フロー**  
  例：注文→与信チェック→出荷指示→顧客通知→レポート生成
- **条件分岐・並列実行・再試行・待機**  
  エラーハンドリングやリトライ、ユーザー入力待ちなど
- **外部システム連携が多い処理**  
  決済API、メール配信、Slack通知、ERP連携など複数APIの順次呼び出し
- **人手承認／再レビューを含むフロー**  
  経費申請、マネージャ承認、決裁フローの自動化
- **バッチ／夜間バッチ処理**  
  スケジュールトリガーから始まる長時間バッチ処理

## 3. ハイブリッド運用イメージ
1. Next.js（またはNestJS/Express）で**即時完結型API**を実装  
2. 必要に応じてMastraワークフローを**トリガー**  
3. フロー進捗は**ポーリング**または**Webhook／イベント駆動**でフロントへ返却  
4. ステップ単位で**マイクロサービス化**し、分散実行も可能

## 4. 運用手順
1. **現状調査**：既存バックエンド処理をリストアップ  
2. **分類**：各処理を「Next.js／API Route」または「Mastraワークフロー」に当てはめる  
3. **PoC実装**：代表的な複雑フローをMastraで試験的に実装・評価  
4. **評価・決定**：パフォーマンス、可視化、保守性をもとに最終方針を策定

## 5. 参考リンク
- Mastra公式ドキュメント：
  https://mastra.ai/docs/workflows/overview
- OnGraph Technologies "Top Backend Frameworks to Master Before Moving into 2024"[^1]

---

[^1]: https://ongraphtech.medium.com/top-backend-frameworks-to-master-before-moving-into-2024-1e9030f95e35 
